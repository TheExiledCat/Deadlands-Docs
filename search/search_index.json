{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Deadlands internal documentation","text":""},{"location":"coding/syntax_conventions/","title":"Code conventions","text":""},{"location":"coding/syntax_conventions/#1-project-structure","title":"1. Project Structure","text":"<ul> <li>Folders: Use a consistent folder structure: Scripts/, Prefabs/,</li> </ul> <p>Scenes/, Materials/, Animations/, Audio/, UI/.</p> <ul> <li> <p>Scenes: Name scenes clearly: MainMenu, Level1, Level2, GameOver.</p> </li> <li> <p>If a scene is just for testing, postfix it with Test e.g.</p> <p>MovementTest</p> </li> </ul>"},{"location":"coding/syntax_conventions/#2-naming-conventions","title":"2. Naming Conventions","text":"<ul> <li> <p>Scripts: PascalCase for class names, e.g., PlayerController.</p> </li> <li> <p>Variables: camelCase, e.g., playerHealth.</p> </li> <li> <p>Members: pascalcase prefixed with m_ e.g. m_Health</p> </li> <li> <p>Constants and enum variants: UPPER_CASE with underscores, e.g.,</p> </li> </ul> <p>MAX_HEALTH.</p> <ul> <li>Public Fields: Use <code>[SerializeField]</code> private when possible and</li> </ul> <p>keep public properties for getters/setters.</p> <ul> <li>Prefabs: Name with PascalCase and include type if helpful.</li> </ul>"},{"location":"coding/syntax_conventions/#3-code-style","title":"3. Code Style","text":"<ul> <li> <p>Indentation: tabs only</p> </li> <li> <p>Braces: Required for every body, with the exception of early</p> </li> </ul> <p>returns e.g. if(conditionNotMet) return false</p> <pre><code>if(condition) {\n\n// code\n\n}\n</code></pre> <ul> <li> <p>Line Length: Prefer &lt;120 characters per line.</p> </li> <li> <p>Comments: Use XML documentation for ALL PUBLIC METHODS ,</p> </li> </ul> <p>inline comments sparingly.</p>"},{"location":"coding/syntax_conventions/#4-unity-specific-guidelines","title":"4. Unity Specific Guidelines","text":"<ul> <li>Update Methods: Avoid heavy logic in <code>Update()</code>. Use Coroutines,</li> </ul> <p>event Actions or Events when possible.</p> <ul> <li> <p>Singletons: Use carefully; make thread-safe if needed.</p> </li> <li> <p>Tag &amp; Layer Usage: Keep tags and layers consistent and documented.</p> </li> <li> <p>Physics: Use <code>FixedUpdate()</code> for physics-related operations.</p> </li> </ul>"},{"location":"coding/syntax_conventions/#6-best-practices","title":"6. Best Practices","text":"<ul> <li> <p>DRY: Don't Repeat Yourself.</p> </li> <li> <p>SRP: Single Responsibility Principle. Make sure classes only do</p> </li> </ul> <p>what they have to and what they are meant for</p> <ul> <li> <p>SOLID: Follow where practical.</p> </li> <li> <p>ScriptableObjects: Use for data-driven designs. Types must be</p> </li> </ul> <p>postfixed with Data e.g. ItemData</p> <ul> <li>Avoid Magic Numbers: Use constants or serialized fields.</li> </ul>"},{"location":"devops/branches/","title":"Branches","text":""},{"location":"devops/branches/#creating-a-branch","title":"Creating a branch","text":"<p>All branches are directly linked to Issues.</p> <p>A branch can only be made after an issue has been created for whatever it is trying to fix.</p> <p>Branches should always be named in the following way:</p> <p>{name of assigned person}/{issue number}</p> <p>For example when <code>Amano</code> works on issue <code>1273</code>: <code>amano/1273</code>.</p> <p>This makes it much easier to find out which branches correlate to which issues and makes backtracking easier when trying to go back to older commits.</p>"},{"location":"devops/branches/#child-branches","title":"Child branches","text":"<p>When creating a child branch or dependant branch, make sure to update from the parent branch once every while. Todo this follow the below steps:</p> <ol> <li> <p>Make sure all your current work is commited locally</p> </li> <li> <p>Checkout the parent branch (or its parent(s))</p> </li> <li> <p>Fetch and pull when possible</p> </li> <li> <p>Repeat for all parents</p> </li> <li> <p><code>git rebase {parent branch}</code> to merge the parent changes into the current branch</p> </li> <li> <p>Make sure to do the top most parent in the hierarchy first and then work your way down from there</p> </li> <li> <p>fix any merge issues that come to play.</p> </li> </ol>"},{"location":"devops/branches/#completed-branches","title":"Completed branches","text":"<p>When a branch has been merged the upstream version will be deleted automatically. </p>"},{"location":"devops/commits/","title":"Commits","text":""},{"location":"devops/commits/#version-control","title":"VERSION CONTROL","text":""},{"location":"devops/commits/#commit-types","title":"Commit Types","text":"Commit Type Title Description Emoji feat Features A new feature &gt; \u2728 --- --- --- --- fix Bug Fixes A bug Fix &gt; \ud83d\udc1b --- --- --- --- docs Documentation Documentation only changes &gt; \ud83d\udcda --- --- --- --- style Styles Changes that do not affect the meaning of the code (white-space,formatting, missing semi-colons, etc) &gt; \ud83d\udc8e --- --- --- --- refactor Code Refactoring A code change that neither fixes a bug nor adds a feature &gt; \ud83d\udce6 --- --- --- --- perf Performance Improvements A code change that improves performance &gt; \ud83d\ude80 --- --- --- --- test Tests Adding missing tests or correcting existing tests &gt; \ud83d\udea8 --- --- --- --- build Builds Changes that affect the build system or external dependencies(example scopes: gulp, broccoli, npm) &gt; \ud83d\udee0 --- --- --- --- ci Continuous Integrations Changes to our CI configuration files and scripts (example scopes:Travis, Circle, BrowserStack, SauceLabs) &gt; \u2699\ufe0f --- --- --- --- chore Chores Other changes that don't modify src or test files &gt; \u267b\ufe0f --- --- --- --- revert Reverts Reverts a previous commit &gt; \ud83d\uddd1 --- --- --- ---"},{"location":"devops/issues/","title":"Issues","text":""},{"location":"devops/issues/#work-item-guidelines","title":"Work item guidelines","text":"<p>Before starting work on anything, make sure there is an issue for it in github made for it. Assign yourself (or the person who will work on it) to the issue and make sure to name the issue in the following way:</p> <p>{Subject}: {Short description of what is wrong or has to be done}</p> <p>Make sure to add a fitting description which explains what needs to be done to finish the work item, or in case of bugfixes what can be done to recreate the bug.</p> <p>Add pictures or video when possible.</p> <p>Example:</p> <p>Title: <code>Movement: Player gets stuck on wall when running past corners</code></p> <p>Description: <code>When the player walks into a wall at an angle they are supposed to glide past it slowly. When the player hits the edge of a walls corner they get stuck on it.</code></p>"},{"location":"devops/issues/#closing-an-issue","title":"Closing an issue","text":"<p>An issue can only be closed once all of the pull requests related to the issue have been tested and merged. Whenever a pull request has been made for the issue be sure to update the status from Active to Code Review and once it has been merged it will automatically be moved to Completed</p> <p>If an issue looks stale or incomplete be sure to comment on it or mark it as stale. If given no reply in a longer window you can close the issue yourself. Be sure to check if issues youve made yourself are not getting stale as well.</p>"},{"location":"devops/pull_requests/","title":"Pull requests","text":""},{"location":"devops/pull_requests/#creating-pull-requests","title":"Creating pull requests","text":"<p>All pull request are directly linked to issues. This means that a pull request cannot exist without n issue being made for it ahead of time. </p> <p>once all the work for an issue has been competed. make a pull request in the following format:</p> <p>{Issue number} {Short description of what the pull request claims to fix}</p> <p>E.g.</p> <p><code>1273 Player now slides past corners when walking into walls</code></p> <p>Make sure to update the issues status to <code>Code review</code></p> <p>Also make sure that the issue the PR was made for is linked in the PRs status tab.</p> <p>You can also make draft Pull requests that only you can see just so you can keep track of all the changes you are making and what the final PR will look like before you publish it.</p>"},{"location":"devops/pull_requests/#pr-review","title":"PR Review","text":"<p>All pull requests will be put into code review to make sure the changes wont cause anything to break, and that all conventions are followed. A pull request must pass these 3 checks:</p> <ol> <li> <p>There can be no errors in the unity project cause of it</p> </li> <li> <p>All required reviewers must accept the PR. The currently required reviewers are:</p> </li> <li> <p>Amano</p> </li> <li> <p>All comments open on the PR must be resolved.</p> </li> </ol> <p>You cannot merge a PR before any of these checks are completed and when they are one of the reviewers will auto complete it.</p>"},{"location":"devops/pull_requests/#_1","title":"Pull requests","text":""}]}